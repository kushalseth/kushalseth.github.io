{"version":3,"sources":["images/profile.jpg","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","style","display","type","data-toggle","data-target","href","id","src","profile","alt","width","height","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,qC,uECA3CD,EAAOC,QAAU,IAA0B,kC,6HCyF5BC,MApFf,WACE,OACE,yBAAKC,UAAU,OAEnB,yBAAKA,UAAU,wBAAwBC,MAAO,CAACC,QAAS,SACtD,yBAAKF,UAAU,aACb,yBAAKA,UAAU,iBACb,4BAAQG,KAAK,SAASH,UAAU,gBAAgBI,cAAY,WAAWC,cAAY,aACjF,0BAAML,UAAU,aAChB,0BAAMA,UAAU,aAChB,0BAAMA,UAAU,cAElB,uBAAGA,UAAU,eAAeM,KAAK,KAAjC,OAEF,yBAAKN,UAAU,2BAA2BO,GAAG,YAC3C,wBAAIP,UAAU,+BACZ,4BAAI,uBAAGM,KAAK,KAAR,QACJ,4BAAI,uBAAGA,KAAK,KAAR,SACJ,4BAAI,uBAAGA,KAAK,KAAR,cAOZ,yBAAKN,UAAU,oCACb,wBAAIA,UAAU,UAAd,eACA,yBAAKQ,IAAKC,IAAST,UAAU,mCAAmCC,MAAO,CAACC,QAAS,UAAYQ,IAAI,cAAcC,MAAM,MAAMC,OAAO,QAClI,gJAEA,4BACA,6SAMF,yBAAKZ,UAAU,oCACb,wBAAIA,UAAU,UAAd,wBACA,6UACA,uBAAGM,KAAK,0CAA0CO,OAAO,SAASb,UAAU,0BAC1E,0BAAMA,UAAU,cADlB,cAMF,yBAAKA,UAAU,oCACb,wBAAIA,UAAU,UAAd,sBACA,yBAAKA,UAAU,OAeb,uBAAGM,KAAK,qDAAqDO,OAAO,SAASb,UAAU,+BACrF,0BAAMA,UAAU,cADlB,mBAIA,uBAAGM,KAAK,gCAAgCO,OAAO,SAASb,UAAU,+BAChE,0BAAMA,UAAU,cADlB,WAGA,uBAAGM,KAAK,mCAAmCO,OAAO,SAASb,UAAU,+BACnE,0BAAMA,UAAU,cADlB,YAGA,uBAAGM,KAAK,4CAA4CO,OAAO,SAASb,UAAU,+BAC5E,0BAAMA,UAAU,cADlB,cAGA,6BA5BF,IA4BQ,6BACN,wGCtEgBc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.261236fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.69e06a47.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport profile from \"./images/profile.jpg\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n{ /*<!-- Navbar --> */}\n<nav className=\"navbar navbar-default\" style={{display: \"none\"}}>\n  <div className=\"container\">\n    <div className=\"navbar-header\">\n      <button type=\"button\" className=\"navbar-toggle\" data-toggle=\"collapse\" data-target=\"#myNavbar\">\n        <span className=\"icon-bar\"></span>\n        <span className=\"icon-bar\"></span>\n        <span className=\"icon-bar\"></span>                        \n      </button>\n      <a className=\"navbar-brand\" href=\"#\">Me</a>\n    </div>\n    <div className=\"collapse navbar-collapse\" id=\"myNavbar\">\n      <ul className=\"nav navbar-nav navbar-right\">\n        <li><a href=\"#\">WHO</a></li>\n        <li><a href=\"#\">WHAT</a></li>\n        <li><a href=\"#\">WHERE</a></li>\n      </ul>\n    </div>\n  </div>\n</nav>\n\n{ /*<!-- First Container  --> */}\n<div className=\"container-fluid bg-1 text-center\">\n  <h1 className=\"margin\">KUSHAL SETH</h1>\n  <img src={profile} className=\"img-responsive img-circle margin\" style={{display: \"inline\" }} alt=\"Kushal Seth\" width=\"550\" height=\"550\" />\n  <h3>Transforming myself towards [#abc_vi] [ AI | ML | Blockchain | Cloud, Quantum & Distributed Systems | VR | IOT ]\n  </h3>\n  <h5>\n  <p>I am a guy whose search history is filled with content of entrepreneurs / startups \n    / motivational talks / standup comedy / blockchain / Quantum / Algorithms / architecture / hackathons / Google / Microsoft / Cars / Food / History. I Love life and enjoy to the fullest.</p>\n  </h5>\n</div>\n\n{ /*<!-- Second Container  --> */}\n<div className=\"container-fluid bg-2 text-center\">\n  <h3 className=\"margin\">PROFESSTIONAL CAREER</h3>\n  <p>Professionally, I am working as a .Net Full Stack Technical Lead in BOLD Limited (products: Zety, LiveCareer, Myperfectresume, RN and many more) having around 9+ years of experience in developing enterprise and consumer focused applications using multiple design patterns both on frontend and backend. </p>\n  <a href=\"https://www.linkedin.com/in/sethkushal/\" target=\"_blank\" className=\"btn btn-default btn-lg\">\n    <span className=\"glyphicon\"></span> Linkedin\n  </a>\n</div>\n\n{ /*<!-- Third Container (Grid)  --> */}\n<div className=\"container-fluid bg-3 text-center\">    \n  <h3 className=\"margin\">Connect with me at</h3>\n  <div className=\"row\">\n    { /*\n        <div className=\"col-sm-4\">\n      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n      <img src=\"birds1.jpg\" className=\"img-responsive margin\" style={{ width : 100 }} alt=\"Image\" />\n    </div>\n    <div className=\"col-sm-4\"> \n      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n      <img src=\"birds2.jpg\" className=\"img-responsive margin\" style={{ width : 100 }} alt=\"Image\" />\n    </div>\n    <div className=\"col-sm-4\"> \n      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n      <img src=\"birds3.jpg\" className=\"img-responsive margin\" style={{ width : 100 }} alt=\"Image\" />\n    </div>\n    */}\n    <a href=\"https://stackoverflow.com/users/4393351/kushalseth\" target=\"_blank\" className=\"btn btn-default btn-lg wdth\">\n      <span className=\"glyphicon\"></span> Stack overflow\n    </a>\n    \n    <a href=\"https://github.com/kushalseth\" target=\"_blank\" className=\"btn btn-default btn-lg wdth\">\n      <span className=\"glyphicon\"></span> GitHub\n    </a>\n    <a href=\"https://twitter.com/KushalSeth14\" target=\"_blank\" className=\"btn btn-default btn-lg wdth\">\n      <span className=\"glyphicon\"></span> Twitter\n    </a>\n    <a href=\"https://www.instagram.com/kushalseth1408/\" target=\"_blank\" className=\"btn btn-default btn-lg wdth\">\n      <span className=\"glyphicon\"></span> Instagram\n    </a>\n    <br/> <br/>\n    <h3> Directly write to me at my email address: kushalseth1408@gmail.com </h3>\n  </div>\n</div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}